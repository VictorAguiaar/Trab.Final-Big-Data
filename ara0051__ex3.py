# -*- coding: utf-8 -*-
"""ARA0051 _EX3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T0AGKehrKmJ2hm3la3yq6utvttF30fnI
"""

#1. Obtenha o dataset do endereço https://www.w3resource.com/pythonexercises/pandas/filter/world_alcohol.csv e
import pandas as pd
df = pd.read_csv('https://raw.githubusercontent.com/VictorAguiaar/Trab.Final-Big-Data/main/world_alcohol%20-%20Copia.csv')
df

#a.DADOS AGRUPADOS POR TIPO DE BEBIDAS
df['Beverage Types'].unique()
g = df.groupby('Beverage Types')
g.get_group('Beer')
g.get_group('Wine')
g.get_group('Spirits')
g.get_group('Other')

#b. Agrupe os dados por Região e por Ano;
#Agrupando por Região
df['WHO region'].unique()
df[df['WHO region'] == 'Africa']

#Agrupando por Ano
df['Year'].unique()
df[df['Year'] == 1987]

#c. Seção de Contagens: Contar a ocorrência de Regiões, de Países e a soma da coluna de valores por Bebida.

#Regiões
df['WHO region'].value_counts()

#d. Realize análises estatísticas da coluna dos valores: Média, Moda, Mediana, Estatística Descritiva e Gráfico de comparação dos valores agrupados por tipo de bebida.
#Analise Estatisco
df['Display Value'].describe()
#Media
df['Display Value'].mean()
#Median
df['Display Value'].median()
#Moda
df['Display Value'].mode()
#Gráfico de comparação dos valores agrupados por tipo de bebida
df['Beverage Types'].value_counts().plot(kind='bar')

#i. Mostrar a coluna de bebidas do ano de 1985.
result = df.loc[df['Year'] == 1985]
result
#ii. Mostrar a coluna de Região com valores acima de 4.
result1 = df.loc[df['Display Value'] > 4]
result1

#2. Seja o dataset chamado cursos-prouni.csv que se encontra no endereço Cursos e notas de corte do PROUNI 2018 - Datasets - Brasil.IO. 
import numpy as np
import pandas as pd

df = pd.read_csv('https://raw.githubusercontent.com/VictorAguiaar/Trab.Final-Big-Data/main/cursos-prouni.csv%20(2).csv',sep=";")
df

# a. Efetuar a limpeza das colunas de notas: onde tiver NaN (Not a Number), substituir por 0,0.
df['nota_integral_ampla'].fillna('0,0', inplace = True)
df['nota_integral_cotas'].fillna('0,0', inplace = True)
df['nota_parcial_ampla'].fillna('0,0', inplace = True)
df['nota_parcial_cotas'].fillna('0,0', inplace = True)
print(df.head())

# b. Agrupe os dados pelo grau (Bacharelado, Licenciatura, etc).
df_grau = df.groupby('grau')
#Utilizando o 'describe' para mostrar a agrupacao por grau, mas a funcao 'describe' gera várias informações adicionais.
print(df_grau.describe().head(10))
#Utilizando a funcao 'get_group' para selecionar o grupo a ser exibido dentro da coluna 'grau'.
df_grau_bachar = df_grau.get_group('Bacharelado').head(10)
print(df_grau_bachar)

df_grau_licen = df_grau.get_group('Licenciatura').head(10)
print(df_grau_licen)

df_grau_tecno = df_grau.get_group('Tecnológico').head(10)
print(df_grau_tecno)

# c. Agrupe os dados pelos cursos de Matemática, Medicina e Pedagogia.
df_cursos_mat_med_ped = df.groupby('nome')

df_curso_med = df_cursos_mat_med_ped.get_group('Medicina').head(10)
print(df_curso_med)

df_curso_mat = df_cursos_mat_med_ped.get_group('Matemática').head(10)
print(df_curso_mat)

df_curso_ped = df_cursos_mat_med_ped.get_group('Pedagogia').head(10)
print(df_curso_ped)

# d. Agrupe os dados por Estado.
df_estados = df.groupby('uf_busca')
print(df_estados.describe().head(10))

# e. Agrupe os dados pelos cursos Tecnológicos.
df_grau2 = df.groupby('grau')

df_grau_tecno = df_grau2.get_group('Tecnológico').head(10)
print(df_grau_tecno)

# f. Elimine a coluna “cidade_filtro” do dataframe.
df.drop('cidade_filtro', axis = 1, inplace=True)
print(df.head(10))

# g. Apresente a média das mensalidades dos cursos de Medicina.
df_cursos = df.groupby('nome')

df_curso_med2 = df_cursos.get_group('Medicina').head(10)

media = df_curso_med2.mean()['mensalidade']

print(media)

# h. Média das notas de corte dos cursos de tempo integral.
# OBS: Não consta na tabela a informacao "notas de corte", entao fiz a media com a "nota integral ampla" 

df_turnos = df.groupby('turno')

df_turno_int = df_turnos.get_group('Integral').head(10)

media_corte = df_turno_int.mean()['nota_integral_ampla']

print(media_corte)

# i. Estatística Descritiva das Notas Integral Ampla dos cursos de Bacharelado.

df_not_int_ampl = df.groupby('nota_integral_ampla')

est_desc_not_int_ampl = df_not_int_ampl.describe().head(10)

print (est_desc_not_int_ampl)

# j. Gráfico comparativo entre o grau dos cursos (Bacharelado, Licenciatura, Tecnologia, etc) pelas Notas Integral de Cotas.

df_grau2 = df.groupby('grau').size()

grafico = df_grau2.plot(x=['Bacharelado', 'Licenciatura', 'Tecnologia'], y='nota_integral_cotas', kind='bar')

print(grafico)